# '===============Работа с файлами======================'

# file = open('test.txt') - 
# try:
#     #open открывает файл для чтения 
#     file = open('file.txt')


# output = 


# # самостоятельный разбор

# open('makers.txt', 'r') - передается 2 аргумента
# первый это имя файла или имя с адресом
# второй аргумент это режим в котором открывается файл


# есть несколько режимов это:
# 'r' - режим чтения open('makers.txt', 'r') - он может только считывать данные (запись невозможна)
# 'r+' - read + write


# 'w' - режим записи open('makers.txt', 'w') - если файл открыт в режиме записи, то в него 
# можно записывать данные, а считывать нельзя (ранние записи удаляются)
# 'w+' - read + write

# 'a' - режим дозаписи open('makers.txt', 'a') - если не нужно удалять файл, нужно что-то дозаписать,
# то открываем в формате append
# 'a+ ' append + read

# 'x' - позволяет записывать данные, отличается от w, что если в том случае, если файла нет
# файл появляется и данные записываются

# 'b' - bynary, открытие файла в двоичном режиме

# 't' - text, открытие файла в текстовом режиме

 

# Если при вызове open() второй аргумент не указан, то файл открывается в режиме чтения 'r'.
# Функция open() возвращает объект файлового типа


# пример:
# file1 = open('makers.txt', 'r')к примеру, мы ранее создали файл 'makers.txt'
# data = file1.read() - считывает все строки, всё содержимое файла
# print(data) 

# file1 = open('makers.txt', 'r')к примеру, мы ранее создали файл 'makers.txt'
# data = file1.readline() - считывает построчно (только первую строку)
# print(data) 


# file1 = open('makers.txt', 'r')к примеру, мы ранее создали файл 'makers.txt'
# data = file1.readlines() - считывает сразу все строки и помещает их в список 
# print(data) 

# записать текст в пустой файл
# запись выполняется с помощью write и writelines

# file2 = open('bootcamp.txt', 'w')
# print(file2.write('This is Makers Bootcamp\n')) #в метод write мы передаем строку, которую хотим записать в 
# # bootcamp.txt и возвращает нам этот метод кол-во символов
# strings = ['One\n', 'Two\n', 'Three\n'] 
# file2.writelines(strings) #метод writelines внутри принимает структуру данных.
# В данном случае это список - этот метод ничего не возвращает

# Закрытие файла 
# когда работа с файлом окончена мы обращаемся с закрытию файла, очень важно, так как защищаем данные
# пример 
# file2.close()
# print(file2.closed) - чтобы проверить точно ли файл закрыт, он возвращает True или False



# # Каждый модуль содержит коллекцию функций и классов, 
# # предназначенных для решения задач  из определенной области.
# к примеру:
# модуль random позволяет генерировать рандомные числа

# модуль math - позволяет работать с числами

# модуль datetime  - содержаться классы для работы с датами и временем


# file1 = open('makers.txt', 'r')
# data = file1.read() - в скобки можем передать число(кол-во символов, которые хотим получить)
# print(type(data))


# Метод seek() - передает курсор на ту позицию, куда мы его поставили

# пример:
# file1 = open('makers.txt', 'r')
# print(file1.read(10))
# file1.seek(0)
# print(file1.read(5))

# метод readline() - считывает построчно
# пример:
# file1 = open('makers.txt', 'r')
# print(file1.readline())
# print(file1.readline())

# Так же, можно пройтись циклом, чтобы всё не readline-нить
# file1 = open('makers.txt', 'r')
# for line in file1:
#     print(line)

# Метод readlines()

# пример:
# file1 = open('makers.txt', 'r')
# list_ = file1.readlines()
# print(list_)


# Функция read()
# file.read(размер)
# # file - та переменная которую мы указали при открытии файла.
# # размер - количество символов, которые нужно прочитать, если не указать, то файл прочитается целиком.

# Пример:
# f = open('example.txt','r') 
# f.read(7)  # чтение 7 символов из example.txt 

# # Обратите внимание что функцию read мы применяем к переменной f, 
# # так как при открытии мы сохранили наш файл в переменной f.

# Функция readline() 
# считывает одну строку из файла и возвращает ее в виде строки. 
# Строка, возвращаемая функцией readline, будет содержать в конце символ новой строки. 
# Этот метод возвращает пустую строку, когда достигает конца файла.

# Пример:
# x = open('test.txt','r') 
# x.readline()  # прочитать первую строку  

# Вывод:
# Это первая строка.  

# Выведем вторую строку:
# x.readline(2)  # прочитать вторую строку  

# Вывод:
# Это вторая строка.  


# функция readlines()
# можно считать все строки нашего файла:
# x.readlines()  # прочитать все строки 

# Выводом будет:
# ['Это первая строка.','Это вторая строка.','Это третья строка.'] 
# Метод возвращает содержимое всего файла в виде списка строк, где каждый элемент в списке представляет одну строку файла. 
# Обратите внимание, как в последнем случае строки отделены друг от друга.



# Функция write()
# Функция write() используется для записи в файлы Python, открытые в режиме записи(w, w+, a):

# file.write(строка)
# file - переменная в которую мы задали при открытии файла строка - наш текст в строковом формате
# Предположим, файла xyz.txt не существует. Он будет создан при попытке открыть его в режиме записи.
# f.write('Hello \n World')  # запись строки Hello World в файл, символ \n - обозначает перенос на новую строку  

# В итоге если мы откроем файл xyz.txt, мы увидим такую запись:
# Hello 
# World 

# Функция writelines().
# writelines() работает аналогично write(), однако в аргументы данная функция принимает уже не одну строку, а список состоящий из строк. Откроем предыдущий файл xyz.txt в режиме a(дозапись):

# f = open('xyz.txt','w') 
# Теперь применим функцию writelines() к файлу f, и передадим список состоящий из строк:

# f.writelines(["\nЯ учу Python!", "\nВ буткемпе Makers!"]) 
# f.close() 
# В итоге если мы откроем файл xyz.txt, то увидим данный текст:

# Hello 
# World 
# Я учу Python! 
# В буткемпе Makers! 



# Текущая позиция в файлах Python.
# В Python возможно узнать текущую позицию в файле с помощью функции tell():

# f = open('example.txt')  # example.txt, который мы создали ранее 
# f.read(4)  # давайте сначала перейдем к 4-й позиции This 
# f.tell()  # возвращает текущую позицию 4 
# Таким же образом можно изменить текущую позицию командой seek(). seek принимает два аргумента, первый аргумент - позиция на которую мы хотим перейти, второй аргумент относительно какой части файла должен двигаться наш курсор - 0 - начала, 1 - относительно текущей позиции, 2 - относительно конца.

# Так если нам нужно перейти на самое начало нашего файла, мы передадим 0 - нулевая строка, 0 - относительно начала:

# f.seek(0,0)  # вернем положение на 0 снова 

# '================Работа с файлами=========================='

# open - функция, которая позволяет открыть файл

# '=================Режимы======================='
# # r - read
# # w - write (только дял записи (сначала все из файла удаляется, а потом записывается))
# # a - append (дозапись (все новое добавляется в конец))
# # x - создает файл, если он уже существует - ошибка 
# # rb - чтение в бинарном виде 
# # wb - запись в бинарном виде
# # ab - запись в бинарном виде



# open('test.txt')
# # когда мы не указываем режим по умолчанию чтения
# ошибка ===


# # когда мы открываем файл в режиме w - он создает пустой файл и потом туда записывает 
# # данные 
# open('test.txt', 'w')


# open('test.txt')
# метод read нельзя использовать при режиме записи и дозаписи
# file.write('Hello world')



# '=============read=================='
# file = open('test.txt') # открываем файл в режиме чтения
# res = file.read() #считывает весь файл и возвращает строку
# print(file.read(5)) #пустая строка, потому что каретка находится в самом конце файла
# print(file.tell()) #10 (показывает текущее положение каретки)
# print(file.seek(0)) #сдвигает каретку
# print(file.readlines(2)) 


# file = open("test.txt", 'w+')
# file.write("Hello world\nMakers\nBootcamp")
# file.seek(0)
# res = file.read()
# file.seek(0)
# file.write("New lines\n")
# file.write(res)
# file.close()











# file.writelines(['line1', 'line2', 'line3']) принимает список со строками и дозаписывает их в файл 

# '=============with=================='
# # with - это конструкция, которая в начале конструкции вызывает __enter__ а в конце вызывает __exit__
# class Test:
#     def __enter__(self):
#         print("Начало работы")
#         return self
    
#     def __exit__(self, *args, **kwargs):
#         print("Конец работы")
    
#     def hello(self):
#         print("Hello world")

# with Test() as test:
#     test.hello()




# file1 = open('test.txt','r+')
# print(file1.write('\nn'))

# file1.seek(10)
# print(file1.read(6))

# file1 = open('test.txt','r')
# for line in file1:
#     print(line)

# file1 = open('test.txt','r')
# list_ = file1.readlines()
# list_ = [i.replace('\n', ' ')for i in list_]
# print(list_)


# file1 = open('Harry.txt','a')
# different = (5)
# print(file1.write(different))

with open('Harry.txt', 'a') as f: 
    f.write('cfdd')

# f = open('Harry.txt', 'a')
# f.write('559')

